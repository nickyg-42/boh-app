@page "/search"
@using ui.Models
@using ui.Services
@inject VerbService VerbService
@inject NavigationManager NavigationManager

<PageTitle>Search Verbs</PageTitle>

<div class="search-container">
    <div class="search-header">
        <h1>Search Verbs</h1>
        <div class="search-type-selector mb-3">
            <select class="form-select" @bind="searchType">
                <option value="name">Search by Name</option>
                <option value="definition">Search by Definition</option>
                <option value="tag">Search by Tag</option>
            </select>
        </div>
    </div>

    <div class="search-box">
        <input type="text" 
               @bind="searchQuery" 
               @bind:event="oninput" 
               @onkeyup="HandleSearchKeyPress"
               placeholder="@GetPlaceholderText()"
               class="form-control" />
    </div>

    @if (loading)
    {
        <div class="loading-indicator">Searching...</div>
    }
    else if (searchResults?.Any() == true)
    {
        <div class="search-results">
            @foreach (var verb in searchResults)
            {
                <div class="verb-card">
                    <div class="d-flex justify-content-between">
                        <h3>@verb.Infinitive</h3>
                        <div>
                            <button class="btn btn-sm btn-outline-primary ms-2" @onclick="() => ShowTagManager(verb)">Manage Tags</button>
                            <button class="btn btn-sm btn-success ms-2" @onclick="() => TakeQuiz(verb)">Take a Quiz</button>
                        </div>
                    </div>
                    @if (verb.Definitions?.Any() == true)
                    {
                        <div class="definitions">
                            @foreach (var def in verb.Definitions.Take(2))
                            {
                                <p>@def.Definition</p>
                            }
                        </div>
                    }
                    @if (verb.Tags?.Any() == true)
                    {
                        <div class="tags">
                            @foreach (var tag in verb.Tags)
                            {
                                <span class="badge me-1" style="background-color: @GetTagColor(tag); color: #fff;">@tag.Name</span>
                            }
                        </div>
                    }

                    @if (verb.Conjugations?.Any() == true)
                    {
                        <div class="conjugations-section mb-4">
                            <h5 class="text-muted">Conjugations</h5>
                            @{
                                var groupedConjugations = verb.Conjugations
                                    .GroupBy(c => c.Group)
                                    .OrderBy(g => g.First().GroupSort)
                                    .ToList();
                            }
                            <div class="row g-3">
                                @foreach (var group in groupedConjugations)
                                {
                                    <div class="col-12 col-md-6 col-lg-4">
                                        <div class="conjugation-group-card card h-100">
                                            <div class="card-header bg-light fw-bold text-primary">@group.Key</div>
                                            <div class="card-body p-2">
                                                <table class="table table-sm mb-0">
                                                    <tbody>
                                                        @foreach (var conj in group.OrderBy(c => c.Sort))
                                                        {
                                                            <tr>
                                                                <td class="text-muted" style="width: 45%;">
                                                                    @conj.Form
                                                                </td>
                                                                <td>@conj.Value</td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrEmpty(searchQuery))
    {
        <div class="no-results">No verbs found</div>
    }
</div>

@if (isTagManagerVisible)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Manage Tags for @selectedVerb?.Infinitive</h5>
                    <button type="button" class="btn-close" @onclick="HideTagManager"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <h6>Current Tags:</h6>
                        @foreach (var tag in selectedVerb?.Tags ?? new List<Tag>())
                        {
                            <span class="badge me-1" style="background-color: @GetTagColor(tag); color: #fff;">
                                @tag.Name
                                <button type="button" class="btn-close btn-close-white btn-sm" @onclick="() => RemoveTag(tag)"></button>
                            </span>
                        }
                    </div>
                    <div class="mb-3">
                        <h6>Create New Tag:</h6>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="newTagName" @onkeyup="HandleNewTagKeyPress" placeholder="Enter new tag name..." />
                            <button class="btn btn-outline-primary" @onclick="CreateAndAddTag" disabled="@string.IsNullOrWhiteSpace(newTagName)">Add</button>
                        </div>
                    </div>
                    <div>
                        <h6>Available Tags:</h6>
                        @foreach (var tag in availableTags.Where(t => !selectedVerb?.Tags.Any(vt => vt.Id == t.Id) ?? true))
                        {
                            <span class="badge me-1" style="cursor: pointer; background-color: @GetTagColor(tag); color: #fff;" @onclick="() => AddTag(tag)">
                                @tag.Name
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {    
    private string searchQuery = "";
    private string searchType = "name";
    private List<Verb>? searchResults;
    private bool loading = false;
    private Verb? selectedVerb;
    private bool isTagManagerVisible;
    private IEnumerable<Tag> availableTags = Array.Empty<Tag>();
    private string newTagName = "";

    private readonly string[] TagColors = new[]
    {
        "#007bff", "#28a745", "#17a2b8", "#ffc107", "#dc3545", "#6610f2", "#fd7e14", "#20c997", "#6f42c1", "#e83e8c"
    };
    private string GetTagColor(Tag tag)
    {
        if (tag == null || string.IsNullOrEmpty(tag.Name)) return TagColors[0];
        int hash = tag.Name.Aggregate(0, (acc, c) => acc + c);
        return TagColors[hash % TagColors.Length];
    }

    protected override async Task OnInitializedAsync()
    {
        availableTags = await VerbService.GetTags();
    }

    private void ShowTagManager(Verb verb)
    {
        selectedVerb = verb;
        isTagManagerVisible = true;
    }

    private void HideTagManager()
    {
        isTagManagerVisible = false;
        selectedVerb = null;
    }

    private void TakeQuiz(Verb verb)
    {
        if (verb != null)
        {
            NavigationManager.NavigateTo($"/fill-in-the-blank/{verb.Id}");
        }
    }

    private async Task AddTag(Tag tag)
    {
        if (selectedVerb != null)
        {
            await VerbService.AddTag(selectedVerb.Id, tag.Name);
            selectedVerb.Tags.Add(tag);
        }
    }

    private async Task RemoveTag(Tag tag)
    {
        if (selectedVerb != null)
        {
            await VerbService.RemoveTag(selectedVerb.Id, tag.Name);
            selectedVerb.Tags.Remove(tag);
        }
    }

    private async Task HandleNewTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTagName))
        {
            await CreateAndAddTag();
        }
    }

    private async Task CreateAndAddTag()
    {
        if (selectedVerb != null && !string.IsNullOrWhiteSpace(newTagName))
        {
            await VerbService.AddTag(selectedVerb.Id, newTagName);
            availableTags = await VerbService.GetTags();
            var newTag = availableTags.FirstOrDefault(t => t.Name == newTagName);
            if (newTag != null)
            {
                selectedVerb.Tags.Add(newTag);
            }
            newTagName = "";
        }
    }

    private string GetPlaceholderText()
    {
        return searchType switch
        {
            "name" => "Enter verb name...",
            "definition" => "Enter definition text...",
            "tag" => "Enter tag name...",
            _ => "Search..."
        };
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PerformSearch();
        }
    }    

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        try
        {
            loading = true;
            searchResults = (await (searchType switch
            {
                "name" => VerbService.SearchVerbsByName(searchQuery),
                "definition" => VerbService.SearchVerbsByDefinition(searchQuery),
                "tag" => VerbService.SearchVerbsByTag(searchQuery),
                _ => Task.FromResult<IEnumerable<Verb>>(Array.Empty<Verb>())
            })).ToList();
        }
        catch (Exception)
        {
            searchResults = null;
        }
        finally
        {
            loading = false;
        }
    }
}

<style>
    .search-container {
        margin: 0 auto;
        padding: 20px;
    }

    .search-header {
        margin-bottom: 2rem;
    }

    .search-tabs {
        display: flex;
        gap: 1rem;
        margin: 1rem 0;
    }

    .tab-button {
        padding: 0.5rem 1rem;
        border: none;
        background: none;
        border-radius: 4px;
        cursor: pointer;
        color: #6c757d;
        transition: all 0.2s;
    }

    .tab-button:hover {
        background: #e9ecef;
    }

    .tab-button.active {
        background: #007bff;
        color: white;
    }

    .search-box {
        margin-bottom: 2rem;
    }

    .verb-card {
        padding: 1.5rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    }

    .verb-card h3 {
        margin: 0 0 1rem 0;
        color: #2c3e50;
    }

    .definitions {
        margin-bottom: 1rem;
    }

    .definitions p {
        margin: 0.5rem 0;
        color: #495057;
    }

    .tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .tag {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        background: #e9ecef;
        border-radius: 20px;
        font-size: 0.9rem;
        color: #495057;
    }

    .loading-indicator {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }

    .no-results {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .conjugation-group-card .card-header {
        font-size: 0.9rem;
    }

    .conjugation-group-card .table td {
        font-size: 0.85rem;
        padding: 0.3rem;
    }
</style>