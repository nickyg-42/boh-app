@using ui.Models
@using ui.Services
@namespace ui.Components
@inject VerbService VerbService

<div class="search-container">
    <div class="input-group mb-3">
        <select class="form-select" style="max-width: 200px;" @bind="searchType">
            <option value="name">Search by Name</option>
            <option value="definition">Search by Definition</option>
            <option value="tag">Search by Tag</option>
        </select>
        <input type="text" class="form-control" placeholder="Search verbs..." @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
    </div>

    @if (searchResults?.Any() == true)
    {
        <div class="search-results">
            @foreach (var verb in searchResults)
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="verb-header mb-3">
                            <h4 class="card-title">@verb.Infinitive</h4>
                            @if (verb.Pronunciations?.Any() == true)
                            {
                                <div class="pronunciation text-muted mb-2">
                                    @foreach (var pron in verb.Pronunciations)
                                    {
                                        <span class="me-2">[@pron.Pronunciation]</span>
                                    }
                                </div>
                            }
                            <div class="tags mb-2">
                                @foreach (var tag in verb.Tags)
                                {
                                    <span class="badge bg-primary me-1">@tag.Name</span>
                                }
                                <button class="btn btn-sm btn-outline-primary ms-2" @onclick="() => ShowTagManager(verb)">Manage Tags</button>
                            </div>
                        </div>

                        @if (verb.Definitions?.Any() == true)
                        {
                            <div class="definitions-section mb-3">
                                <h6 class="text-muted">Definitions</h6>
                                <ol class="list-unstyled">
                                    @foreach (var def in verb.Definitions)
                                    {
                                        <li class="mb-1">@def.Definition</li>
                                    }
                                </ol>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(verb.Etymology))
                        {
                            <div class="etymology-section mb-3">
                                <h6 class="text-muted">Etymology</h6>
                                <p class="mb-0">@verb.Etymology</p>
                            </div>
                        }                        @if (verb.Conjugations?.Any() == true)
                        {
                            <div class="conjugations-section">
                                <button class="btn btn-sm btn-outline-secondary" type="button" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target="#conjugations_@(verb.Id)">
                                    Show Conjugations
                                </button>
                                <div class="collapse mt-2" id="conjugations_@(verb.Id)">
                                    @{
                                        var groupedConjugations = verb.Conjugations
                                            .GroupBy(c => c.Group)
                                            .OrderBy(g => g.First().GroupSort);
                                    }
                                    <div class="accordion" id="conjugationsAccordion_@(verb.Id)">
                                        @foreach (var group in groupedConjugations)
                                        {
                                            var groupId = $"collapse_{verb.Id}_{group.Key.Replace(" ", "_")}";
                                            <div class="accordion-item">
                                                <h2 class="accordion-header">
                                                    <button class="accordion-button collapsed" type="button" 
                                                            data-bs-toggle="collapse" 
                                                            data-bs-target="#@(groupId)">
                                                        @group.Key
                                                    </button>
                                                </h2>
                                                <div id="@(groupId)" class="accordion-collapse collapse" data-bs-parent="#conjugationsAccordion_@(verb.Id)">
                                                    <div class="accordion-body">
                                                        <table class="table table-sm">
                                                            <tbody>
                                                                @foreach (var conj in group.OrderBy(c => c.Sort))
                                                                {
                                                                    <tr>
                                                                        <td class="text-muted" style="width: 40%;">@(conj.Form ?? "")</td>
                                                                        <td>@conj.Value</td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        @if (verb.RelatedWords?.Any() == true)
                        {
                            <div class="related-section mt-3">
                                <h6 class="text-muted">Related Words</h6>
                                <div>
                                    @foreach (var word in verb.RelatedWords)
                                    {
                                        <span class="badge bg-secondary me-1 mb-1">@word.Word</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }

    @if (isTagManagerVisible)
    {
        <div class="modal" tabindex="-1" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Manage Tags for @selectedVerb?.Infinitive</h5>
                        <button type="button" class="btn-close" @onclick="HideTagManager"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <h6>Current Tags:</h6>
                            @foreach (var tag in selectedVerb?.Tags ?? new List<Tag>())
                            {
                                <span class="badge bg-primary me-1">
                                    @tag.Name
                                    <button type="button" class="btn-close btn-close-white btn-sm" @onclick="() => RemoveTag(tag)"></button>
                                </span>
                            }
                        </div>
                        <div class="mb-3">
                            <h6>Create New Tag:</h6>
                            <div class="input-group">
                                <input type="text" class="form-control" @bind="newTagName" @onkeyup="HandleNewTagKeyPress" placeholder="Enter new tag name..." />
                                <button class="btn btn-outline-primary" @onclick="CreateAndAddTag" disabled="@string.IsNullOrWhiteSpace(newTagName)">Add</button>
                            </div>
                        </div>
                        <div>
                            <h6>Available Tags:</h6>
                            @foreach (var tag in availableTags.Where(t => !selectedVerb?.Tags.Any(vt => vt.Id == t.Id) ?? true))
                            {
                                <span class="badge bg-secondary me-1" style="cursor: pointer;" @onclick="() => AddTag(tag)">
                                    @tag.Name
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop show"></div>
    }
</div>

@code {
    private string searchTerm = "";
    private string searchType = "name";
    private IEnumerable<Verb> searchResults = Array.Empty<Verb>();
    private bool isTagManagerVisible;
    private Verb? selectedVerb;
    private IEnumerable<Tag> availableTags = Array.Empty<Tag>();
    private string newTagName = "";

    protected override async Task OnInitializedAsync()
    {
        availableTags = await VerbService.GetTags();
    }

    private async Task HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            searchResults = searchType switch
            {
                "name" => await VerbService.SearchVerbsByName(searchTerm),
                "definition" => await VerbService.SearchVerbsByDefinition(searchTerm),
                "tag" => await VerbService.SearchVerbsByTag(searchTerm),
                _ => Array.Empty<Verb>()
            };
        }
        else
        {
            searchResults = Array.Empty<Verb>();
        }
    }

    private void ShowTagManager(Verb verb)
    {
        selectedVerb = verb;
        isTagManagerVisible = true;
    }

    private void HideTagManager()
    {
        isTagManagerVisible = false;
        selectedVerb = null;
    }    

    private async Task AddTag(Tag tag)
    {
        if (selectedVerb != null)
        {
            await VerbService.AddTag(selectedVerb.Id, tag.Name);
            selectedVerb.Tags.Add(tag);
        }
    }

    private async Task RemoveTag(Tag tag)
    {
        if (selectedVerb != null)
        {
            await VerbService.RemoveTag(selectedVerb.Id, tag.Name);
            selectedVerb.Tags.Remove(tag);
        }
    }

    private async Task HandleNewTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTagName))
        {
            await CreateAndAddTag();
        }
    }

    private async Task CreateAndAddTag()
    {
        if (selectedVerb != null && !string.IsNullOrWhiteSpace(newTagName))
        {
            await VerbService.AddTag(selectedVerb.Id, newTagName);
            availableTags = await VerbService.GetTags();
            var newTag = availableTags.FirstOrDefault(t => t.Name == newTagName);
            if (newTag != null)
            {
                selectedVerb.Tags.Add(newTag);
            }
            newTagName = "";
        }
    }
}