@using ui.Models
@using ui.Services
@namespace ui.Components

@inject VerbService VerbService

<div class="card">
    <div class="card-body">
        <h3 class="card-title">Verb of the Day</h3>
        <button class="btn btn-primary mb-3" @onclick="LoadRandomVerb">Next Verb</button>
        @if (currentVerb == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <div class="verb-header mb-4">
                <h2 class="display-4">@currentVerb.Infinitive</h2>
                @if (currentVerb.Pronunciations?.Any() == true)
                {
                    <div class="pronunciation text-muted mb-2">
                        @foreach (var pron in currentVerb.Pronunciations)
                        {
                            <span class="me-2">[@pron.Pronunciation]</span>
                        }
                    </div>
                }
                <div class="tags mb-3">
                    @foreach (var tag in currentVerb.Tags)
                    {
                        <span class="badge me-1" style="background-color: @GetTagColor(tag); color: #fff;">@tag.Name</span>
                    }
                    <button class="btn btn-sm btn-outline-primary ms-2" @onclick="ShowTagManager">Manage Tags</button>
                </div>
            </div>

            @if (currentVerb.Definitions?.Any() == true)
            {
                <div class="definitions-section mb-4">
                    <h5 class="text-muted">Definitions</h5>
                    <ol class="list-unstyled">
                        @foreach (var def in currentVerb.Definitions)
                        {
                            <li class="mb-2">@def.Definition</li>
                        }
                    </ol>
                </div>
            }

            @if (!string.IsNullOrEmpty(currentVerb.Etymology))
            {
                <div class="etymology-section mb-4">
                    <h5 class="text-muted">Etymology</h5>
                    <p>@currentVerb.Etymology</p>
                </div>
            }            @if (currentVerb.Conjugations?.Any() == true)
            {
                <div class="conjugations-section mb-4">
                    <h5 class="text-muted">Conjugations</h5>
                    @{
                        var groupedConjugations = currentVerb.Conjugations
                            .GroupBy(c => c.Group)
                            .OrderBy(g => g.First().GroupSort)
                            .ToList();
                    }
                    <div class="row g-3">
                        @foreach (var group in groupedConjugations)
                        {
                            <div class="col-12 col-md-6 col-lg-4">
                                <div class="conjugation-group-card card h-100">
                                    <div class="card-header bg-light fw-bold text-primary">@group.Key</div>
                                    <div class="card-body p-2">
                                        <table class="table table-sm mb-0">
                                            <tbody>
                                                @foreach (var conj in group.OrderBy(c => c.Sort))
                                                {
                                                    <tr>
                                                        <td class="text-muted" style="width: 45%;">
                                                            @conj.Form
                                                        </td>
                                                        <td>@conj.Value</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (currentVerb.RelatedWords?.Any() == true)
            {
                <div class="related-section mb-4">
                    <h5 class="text-muted">Related Words</h5>
                    <div>
                        @foreach (var word in currentVerb.RelatedWords)
                        {
                            <span class="badge bg-secondary me-1 mb-1">@word.Word</span>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@if (isTagManagerVisible)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Manage Tags for @currentVerb?.Infinitive</h5>
                    <button type="button" class="btn-close" @onclick="HideTagManager"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <h6>Current Tags:</h6>
                        @foreach (var tag in currentVerb?.Tags ?? new List<Tag>())
                        {
                            <span class="badge me-1" style="background-color: @GetTagColor(tag); color: #fff;">
                                @tag.Name
                                <button type="button" class="btn-close btn-close-white btn-sm" @onclick="() => RemoveTag(tag)"></button>
                            </span>
                        }
                    </div>
                    <div class="mb-3">
                        <h6>Create New Tag:</h6>
                        <div class="input-group">
                            <input type="text" class="form-control" @bind="newTagName" @onkeyup="HandleNewTagKeyPress" placeholder="Enter new tag name..." />
                            <button class="btn btn-outline-primary" @onclick="CreateAndAddTag" disabled="@string.IsNullOrWhiteSpace(newTagName)">Add</button>
                        </div>
                    </div>
                    <div>
                        <h6>Available Tags:</h6>
                        @foreach (var tag in availableTags.Where(t => !currentVerb?.Tags.Any(vt => vt.Id == t.Id) ?? true))
                        {
                            <span class="badge me-1" style="cursor: pointer; background-color: @GetTagColor(tag); color: #fff;" @onclick="() => AddTag(tag)">
                                @tag.Name
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private Verb? currentVerb;

    private bool isTagManagerVisible;
    private IEnumerable<Tag> availableTags = Array.Empty<Tag>();
    private string newTagName = "";

    private readonly string[] TagColors = new[]
    {
        "#007bff", "#28a745", "#17a2b8", "#ffc107", "#dc3545", "#6610f2", "#fd7e14", "#20c997", "#6f42c1", "#e83e8c"
    };
    private string GetTagColor(Tag tag)
    {
        if (tag == null || string.IsNullOrEmpty(tag.Name)) return TagColors[0];
        int hash = tag.Name.Aggregate(0, (acc, c) => acc + c);
        return TagColors[hash % TagColors.Length];
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRandomVerb();
        availableTags = await VerbService.GetTags();
    }

    private async Task LoadRandomVerb()
    {
        currentVerb = await VerbService.GetRandomVerb();
    }

    private void ShowTagManager()
    {
        isTagManagerVisible = true;
    }

    private void HideTagManager()
    {
        isTagManagerVisible = false;
    }

    private async Task AddTag(Tag tag)
    {
        if (currentVerb != null)
        {
            await VerbService.AddTag(currentVerb.Id, tag.Name);
            currentVerb.Tags.Add(tag);
        }
    }

    private async Task RemoveTag(Tag tag)
    {
        if (currentVerb != null)
        {
            await VerbService.RemoveTag(currentVerb.Id, tag.Name);
            currentVerb.Tags.Remove(tag);
        }
    }

    private async Task HandleNewTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTagName))
        {
            await CreateAndAddTag();
        }
    }

    private async Task CreateAndAddTag()
    {
        if (currentVerb != null && !string.IsNullOrWhiteSpace(newTagName))
        {
            await VerbService.AddTag(currentVerb.Id, newTagName);
            availableTags = await VerbService.GetTags();
            var newTag = availableTags.FirstOrDefault(t => t.Name == newTagName);
            if (newTag != null)
            {
                currentVerb.Tags.Add(newTag);
            }
            newTagName = "";
        }
    }
}